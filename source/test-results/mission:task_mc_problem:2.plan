
;;; Statistics:
(
(:am-cycles . 18)
(:n-alts-chosen . 2)
(:n-alts-remaining . 21)
(:n-poisons . 2)
)

;;; Action levels:
(
(move . 1)
(task_mc_problem . 0)
(task_patched_mc_problem . 0)
)

;;; Effect levels:
(
(n_1 . 0)
(n_2 . 0)
(safe . 0)
(state . 1)
(tried . 1)
)

;;; Nodes:
(
(node-1
   nil
   nil
   nil
   ((node-15 :begin) (node-14 :begin) (node-13 :begin) (node-12 :begin) (node-11 :begin) (node-10 :begin) (node-9 :begin) (node-8 :begin) (node-7 :begin) (node-6 :begin) (node-5 :begin) (node-4 :begin) (node-3 :begin) (node-2 :begin))
   (0 :inf 0 :inf)
   start
   nil
)
(node-2
   ((node-3 :end) (node-1 :end))
   nil
   nil
   nil
   (0 :inf 0 :inf)
   finish
   nil
)
(node-3
   ((node-4 :end) (node-1 :end))
   nil
   nil
   ((node-2 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 c r)
)
(node-4
   ((node-5 :end) (node-1 :end))
   nil
   nil
   ((node-3 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 c l)
)
(node-5
   ((node-6 :end) (node-1 :end))
   nil
   nil
   ((node-4 :begin))
   (0 :inf 0 :inf)
   action
   (move 2 c r)
)
(node-6
   ((node-7 :end) (node-1 :end))
   nil
   nil
   ((node-5 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 c l)
)
(node-7
   ((node-8 :end) (node-1 :end))
   nil
   nil
   ((node-6 :begin))
   (0 :inf 0 :inf)
   action
   (move 2 c r)
)
(node-8
   ((node-9 :end) (node-1 :end))
   nil
   nil
   ((node-7 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 c l)
)
(node-9
   ((node-10 :end) (node-1 :end))
   nil
   nil
   ((node-8 :begin))
   (0 :inf 0 :inf)
   action
   (move 2 m r)
)
(node-10
   ((node-11 :end) (node-1 :end))
   nil
   nil
   ((node-9 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 m 1 c l)
)
(node-11
   ((node-12 :end) (node-1 :end))
   nil
   nil
   ((node-10 :begin))
   (0 :inf 0 :inf)
   action
   (move 2 m r)
)
(node-12
   ((node-13 :end) (node-1 :end))
   nil
   nil
   ((node-11 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 c l)
)
(node-13
   ((node-14 :end) (node-1 :end))
   nil
   nil
   ((node-12 :begin))
   (0 :inf 0 :inf)
   action
   (move 2 c r)
)
(node-14
   ((node-15 :end) (node-1 :end))
   nil
   nil
   ((node-13 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 m l)
)
(node-15
   ((node-1 :end))
   nil
   nil
   ((node-14 :begin))
   (0 :inf 0 :inf)
   action
   (move 1 m 1 c r)
)
)

;;; TOME:
(
((tome (n_1 plus n_0 is n_1) :always) true)
((tome (n_1 plus n_1 is n_2) :always) true)
((tome (n_1 plus n_2 is n_3) :always) true)
((tome (n_2 plus n_0 is n_2) :always) true)
((tome (n_2 plus n_1 is n_3) :always) true)
((tome (safe n_0 n_0) :always) true)
((tome (safe n_0 n_1) :always) true)
((tome (safe n_0 n_2) :always) true)
((tome (safe n_0 n_3) :always) true)
((tome (safe n_1 n_0) :always) true)
((tome (safe n_1 n_1) :always) true)
((tome (safe n_2 n_0) :always) true)
((tome (safe n_2 n_1) :always) true)
((tome (safe n_2 n_2) :always) true)
((tome (safe n_3 n_0) :always) true)
((tome (safe n_3 n_1) :always) true)
((tome (safe n_3 n_2) :always) true)
((tome (safe n_3 n_3) :always) true)
((tome (state) (node-1 :end)) (left n_3 n_3 n_0 n_0))
((tome (state) (node-10 :end)) (left n_2 n_2 n_1 n_1))
((tome (state) (node-11 :end)) (right n_1 n_1 n_2 n_2))
((tome (state) (node-12 :end)) (left n_3 n_1 n_0 n_2))
((tome (state) (node-13 :end)) (right n_3 n_0 n_0 n_3))
((tome (state) (node-14 :end)) (left n_3 n_2 n_0 n_1))
((tome (state) (node-15 :end)) (right n_2 n_2 n_1 n_1))
((tome (state) (node-3 :end)) (right n_0 n_0 n_3 n_3))
((tome (state) (node-4 :end)) (left n_0 n_1 n_3 n_2))
((tome (state) (node-5 :end)) (right n_0 n_0 n_3 n_3))
((tome (state) (node-6 :end)) (left n_0 n_2 n_3 n_1))
((tome (state) (node-7 :end)) (right n_0 n_1 n_3 n_2))
((tome (state) (node-8 :end)) (left n_0 n_3 n_3 n_0))
((tome (state) (node-9 :end)) (right n_0 n_2 n_3 n_1))
((tome (tried ?? ?? ?? ?? ??) (node-1 :end)) false)
((tome (tried left n_0 n_1 n_3 n_2) (node-3 :end)) true)
((tome (tried left n_0 n_2 n_3 n_1) (node-5 :end)) true)
((tome (tried left n_0 n_3 n_3 n_0) (node-7 :end)) true)
((tome (tried left n_2 n_2 n_1 n_1) (node-9 :end)) true)
((tome (tried left n_3 n_1 n_0 n_2) (node-11 :end)) true)
((tome (tried left n_3 n_2 n_0 n_1) (node-13 :end)) true)
((tome (tried left n_3 n_3 n_0 n_0) (node-15 :end)) true)
((tome (tried right n_0 n_0 n_3 n_3) (node-4 :end)) true)
((tome (tried right n_0 n_1 n_3 n_2) (node-6 :end)) true)
((tome (tried right n_0 n_2 n_3 n_1) (node-8 :end)) true)
((tome (tried right n_1 n_1 n_2 n_2) (node-10 :end)) true)
((tome (tried right n_2 n_2 n_1 n_1) (node-14 :end)) true)
((tome (tried right n_3 n_0 n_0 n_3) (node-12 :end)) true)
)

;;; GOST:
(
((gost achievable (state) (left n_0 n_1 n_3 n_2) (node-3 :begin))
   (((node-4 :end) . :expand))
)
((gost achievable (state) (left n_0 n_2 n_3 n_1) (node-5 :begin))
   (((node-6 :end) . :expand))
)
((gost achievable (state) (left n_0 n_3 n_3 n_0) (node-7 :begin))
   (((node-8 :end) . :expand))
)
((gost achievable (state) (left n_2 n_2 n_1 n_1) (node-9 :begin))
   (((node-10 :end) . :expand))
)
((gost achievable (state) (left n_3 n_1 n_0 n_2) (node-11 :begin))
   (((node-12 :end) . :expand))
)
((gost achievable (state) (left n_3 n_2 n_0 n_1) (node-13 :begin))
   (((node-14 :end) . :expand))
)
((gost achievable (state) (left n_3 n_3 n_0 n_0) (node-15 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost achievable (state) (right n_0 n_0 n_3 n_3) (node-2 :begin))
   (((node-3 :end) . :expand))
)
((gost achievable (state) (right n_0 n_0 n_3 n_3) (node-4 :begin))
   (((node-5 :end) . :expand))
)
((gost achievable (state) (right n_0 n_1 n_3 n_2) (node-6 :begin))
   (((node-7 :end) . :expand))
)
((gost achievable (state) (right n_0 n_2 n_3 n_1) (node-8 :begin))
   (((node-9 :end) . :expand))
)
((gost achievable (state) (right n_1 n_1 n_2 n_2) (node-10 :begin))
   (((node-11 :end) . :expand))
)
((gost achievable (state) (right n_2 n_2 n_1 n_1) (node-14 :begin))
   (((node-15 :end) . :expand))
)
((gost achievable (state) (right n_3 n_0 n_0 n_3) (node-12 :begin))
   (((node-13 :end) . :expand))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-12 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-14 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-15 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-3 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-4 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_0 is n_1) true (node-8 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_1 is n_2) true (node-10 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_1 is n_2) true (node-6 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-12 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-14 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-15 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-3 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-4 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_1 plus n_2 is n_3) true (node-8 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_0 is n_2) true (node-11 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_0 is n_2) true (node-13 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_0 is n_2) true (node-5 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_0 is n_2) true (node-7 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_0 is n_2) true (node-9 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_1 is n_3) true (node-11 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_1 is n_3) true (node-13 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_1 is n_3) true (node-5 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_1 is n_3) true (node-7 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (n_2 plus n_1 is n_3) true (node-9 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_0) true (node-15 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_0) true (node-4 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_1) true (node-13 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_1) true (node-3 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_1) true (node-6 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_2) true (node-11 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_2) true (node-5 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_2) true (node-8 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_3) true (node-12 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_0 n_3) true (node-7 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_1 n_1) true (node-10 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_1 n_1) true (node-14 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_1 n_1) true (node-9 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_2 n_2) true (node-10 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_2 n_2) true (node-14 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_2 n_2) true (node-9 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_0) true (node-12 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_0) true (node-7 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_1) true (node-11 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_1) true (node-5 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_1) true (node-8 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_2) true (node-13 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_2) true (node-3 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_2) true (node-6 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_3) true (node-15 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (safe n_3 n_3) true (node-4 :begin))
   ((:always . :already-satisfied))
)
((gost only_use_if (tried left n_0 n_1 n_3 n_2) false (node-3 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_0 n_2 n_3 n_1) false (node-5 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_0 n_3 n_3 n_0) false (node-7 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_2 n_2 n_1 n_1) false (node-9 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_3 n_1 n_0 n_2) false (node-11 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_3 n_2 n_0 n_1) false (node-13 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried left n_3 n_3 n_0 n_0) false (node-15 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_0 n_0 n_3 n_3) false (node-4 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_0 n_1 n_3 n_2) false (node-6 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_0 n_2 n_3 n_1) false (node-8 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_1 n_1 n_2 n_2) false (node-10 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_2 n_2 n_1 n_1) false (node-14 :begin))
   (((node-1 :end) . :already-satisfied))
)
((gost only_use_if (tried right n_3 n_0 n_0 n_3) false (node-12 :begin))
   (((node-1 :end) . :already-satisfied))
)
)

;;; PSV descriptions:
(
)

;;; PSV equivalence classes:
(
)

;;; Resource usage table:
(
)

;;; World at end of node-1:
(
((n_1 plus n_0 is n_1) true)
((n_1 plus n_1 is n_2) true)
((n_1 plus n_2 is n_3) true)
((n_2 plus n_0 is n_2) true)
((n_2 plus n_1 is n_3) true)
((safe n_0 n_0) true)
((safe n_0 n_1) true)
((safe n_0 n_2) true)
((safe n_0 n_3) true)
((safe n_1 n_0) true)
((safe n_1 n_1) true)
((safe n_2 n_0) true)
((safe n_2 n_1) true)
((safe n_2 n_2) true)
((safe n_3 n_0) true)
((safe n_3 n_1) true)
((safe n_3 n_2) true)
((safe n_3 n_3) true)
)

;;; World at end of node-2:
(
((n_1 plus n_0 is n_1) true)
((n_1 plus n_1 is n_2) true)
((n_1 plus n_2 is n_3) true)
((n_2 plus n_0 is n_2) true)
((n_2 plus n_1 is n_3) true)
((safe n_0 n_0) true)
((safe n_0 n_1) true)
((safe n_0 n_2) true)
((safe n_0 n_3) true)
((safe n_1 n_0) true)
((safe n_1 n_1) true)
((safe n_2 n_0) true)
((safe n_2 n_1) true)
((safe n_2 n_2) true)
((safe n_3 n_0) true)
((safe n_3 n_1) true)
((safe n_3 n_2) true)
((safe n_3 n_3) true)
((state) (right n_0 n_0 n_3 n_3))
((tried left n_0 n_1 n_3 n_2) true)
((tried left n_0 n_2 n_3 n_1) true)
((tried left n_0 n_3 n_3 n_0) true)
((tried left n_2 n_2 n_1 n_1) true)
((tried left n_3 n_1 n_0 n_2) true)
((tried left n_3 n_2 n_0 n_1) true)
((tried left n_3 n_3 n_0 n_0) true)
((tried right n_0 n_0 n_3 n_3) true)
((tried right n_0 n_1 n_3 n_2) true)
((tried right n_0 n_2 n_3 n_1) true)
((tried right n_1 n_1 n_2 n_2) true)
((tried right n_2 n_2 n_1 n_1) true)
((tried right n_3 n_0 n_0 n_3) true)
)
